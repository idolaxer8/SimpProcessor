/*ASSEMBLER*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#define MAX_LABEL 50 
#define MAX_LINE 300
#define CMD_MEM_SIZE 4096


typedef struct  //label struct holds name and address
{
    int label_addr;
    char label_name[MAX_LABEL]
}label;

typedef struct  //command struct 
{
    char opcode[8];
    char rs[4];
    char rt[4];
    char rd[4];
    char imm[20];
}command;


/*Assembler Functions*/

/*FUNCTION1
DESC: Clean line - clean spaces & tabs- not for word commands*/
char *clean_line(char *line) {
	char tail_s[MAX_LINE];
	char *tail = &tail_s;
	char *head;
	char *new_line = line;
	int i = 0;
	while ((*line != '\n') && (*line != '#')) {
		if (!((*line == ' ') || (*line == '\t')))
		{
			new_line[i++] = *line;
		}
		line++;
	}
	new_line[i] = '\0';
	if (*new_line == '\0') return NULL;
	strcpy(tail, strchr(new_line, '$'));
	head = new_line;
	while (*(new_line) != '$') new_line++;
	*new_line = ',';
	*(new_line + 1) = '\0';
	strcat(head, tail);
	head[i + 1] = '\0';
	return head;
}

/*FUNCTION2
DESC: Check if this is a command line, else the line is empty or includes comment only*/

int is_command_line(char *line) {
	int i = 0;
	while ((*(line + i) != '\n') && (*(line + i) != '#'))
	{
		if (!((*(line + i) == ' ') || (*(line + i) == '\t'))) {
			return 1;
		}
		i++;
	}
	return 0;
}

/*FUNCTION3
DESC: Fill our command struct accordingly*/

void convert2command(char *line, command *command) {
	char *token = strtok(line, ",");
	strcpy(command->opcode, token);
	token = strtok(NULL, ",");
	strcpy(command->rd, token);
	token = strtok(NULL, ",");
	strcpy(command->rs, token);
	token = strtok(NULL, ",");
	strcpy(command->rt, token);
	token = strtok(NULL, ",");
	if (token!= NULL)
	{
		strcpy(command->imm, token);
		token = strtok(NULL, ",");
	}
}

/*FUNCTION4
DESC: Determine if the line is a word command */
int if_word(char *line) {
	if (strstr(line, "word") == NULL) return 0;
	return 1;
}


/*FUNCTION5
DESC: Insert word command data into the relevant address in the memory array */
void word_command(char *line, int mem[]) {
	int addr, data;
	char *str = strtok(line, " ");
	str = strtok(NULL, " ");
	addr = atoi(str);
	str = strtok(NULL, " ");
	data = atoi(str);
	mem[addr] = data;
}

/*FUNCTION6
DESC: Determine if the line is label returns 1, else return 0*/
int is_label(char *line) {
	char *is_label = strchr(line, ':');
	char *contains_comment = strchr(line, '#');
	if (is_label != NULL) {
		if (contains_comment != NULL) {
			if (is_label > contains_comment)
				return 0;
		}
		return 1;
	}
	return 0;
}

/*FUNCTION7
DESC: Determine if the label line also has instruction returns 1, else return 0*/
int is_label_with_command(char *line) {
	char *label = strchr(line, ':');
	label++;
	if (is_command_line(label) == 0) return 0;
	return 1;
}

int fill_and_count_addr(FILE *asm_file ,label *labels) {
    char label[MAX_LABEL];
    char *label_p = &label;
    char line[MAX_LINE+1];
    int counter=0, addr=0;
    while (fgets(line, sizeof(line), asm_file))
    {
        if (is_label)
        {
            strcpy(label_p, strtok(line, ":"));
            strcpy(labels->label_name, label_p);
            labels->label_addr = addr+counter;
            labels++;
            counter++;
        }
        addr++;

    }

    return counter;
}



/*FUNCTION
DESC: Change label (string) to addr (string)*/

int label2addr(command *command, label *labels, int label_num) { //NEED TO CHECK
	int addr;
	for (int i = 0; i < label_num; i++) {
		if (strcmp(command->imm, labels[i].label_name) == 0) {
			addr = labels[i].label_addr;
			return addr;
		}
	}
}

